import telebot
import requests
import time
import logging
import os
from datetime import datetime, time as dt_time, timedelta
import pytz 

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–†–û–Ñ–ö–¢–£ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_DESTINATION = os.environ.get("CHANNEL_DESTINATION")

ALARM_PHOTO_PATH = "airallert.png"
ALL_CLEAR_PHOTO_PATH = "airallert2.png"
SILENCE_MINUTE_PHOTO_PATH = "hvilina.png" 

CHECK_INTERVAL = 7 

TARGET_AREA_NAME = "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)" 

# –ü–û–í–ï–†–¢–ê–Ñ–ú–û–°–Ø –î–û –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–û–ì–û API –Ø–ö –û–°–ù–û–í–ù–û–ì–û
ALARM_API_URL = "https://map.ukrainealarm.com/api/v3/alerts" 
TARGET_AREA_ID = "251675276" # ID –ë—Ä–æ–≤–∞—Ä—Å—å–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É –¥–ª—è —Ü—å–æ–≥–æ API

KYIV_TIMEZONE = pytz.timezone('Europe/Kyiv') 
SILENCE_TIME = dt_time(9, 0) 
# --- –ö–Ü–ù–ï–¶–¨ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ---

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
if not BOT_TOKEN or not CHANNEL_DESTINATION:
    raise ValueError("BOT_TOKEN –∞–±–æ CHANNEL_DESTINATION –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.critical(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    exit(1)

# –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É
current_alarm_state = None 
last_silence_date = None 
api_error_count = 0 # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ API

# --- –§–£–ù–ö–¶–Ü–á ---

def google_search_for_alarm_status():
    """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Google Search –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∏–≤–æ–≥–∏ (—è–∫ —Ä–µ–∑–µ—Ä–≤)."""
    # –¶–µ –ø—Ä–∏–∫–ª–∞–¥ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ —ñ–º—ñ—Ç—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ, –≤–∏ –± –≤–∏–∫–ª–∏–∫–∞–ª–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–∞—Ä—Å–µ—Ä.
    # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ None, —ñ–º—ñ—Ç—É—é—á–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞–Ω, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É.
    logger.warning("–ê–≤–∞—Ä—ñ–π–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ Google Search...")
    
    # –£ —Ü—å–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É, –æ—Å–∫—ñ–ª—å–∫–∏ —è –Ω–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏ Google Search Tool —É –≤–∞—à–æ–º—É Python-—Å–∫—Ä–∏–ø—Ç—ñ, 
    # —è –∑–∞–ª–∏—à—É –π–æ–≥–æ —è–∫ –∑–∞–≥–ª—É—à–∫—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î None. –í–∞–º —Å–ª—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å.
    # –û–¥–Ω–∞–∫, –Ω–∞–π–∫—Ä–∞—â–µ, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ - —Ü–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª CHECK_INTERVAL –¥–æ 30 —Å–µ–∫—É–Ω–¥ 
    # —ñ —Å–ø–æ–¥—ñ–≤–∞—Ç–∏—Å—è, —â–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–µ.
    
    # –¢–∏–º—á–∞—Å–æ–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
    return None

def get_alarm_status():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –ª–æ–≥—ñ–∫—É."""
    global api_error_count
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36'
    }
    
    try:
        response = requests.get(ALARM_API_URL, headers=headers, timeout=10)
        response.raise_for_status() 
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
        is_alarm = any(
            item.get('alert_type') == 'air_raid' and 
            item.get('location_uid') == TARGET_AREA_ID
            for item in data
        )
        api_error_count = 0 # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
        return is_alarm
        
    except (requests.exceptions.HTTPError, requests.exceptions.RequestException) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API ({ALARM_API_URL}): {e}") 
        api_error_count += 1
        
        # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —Ç—Ä–∏–≤–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None —ñ –ø—Ä–æ—Å–∏–º–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if api_error_count > 5:
            logger.critical("–ü–æ–º–∏–ª–∫–∏ API —Ç—Ä–∏–≤–∞—é—Ç—å! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ CHECK_INTERVAL –¥–æ 30-60 —Å–µ–∫—É–Ω–¥ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ API –≤—Ä—É—á–Ω—É.")
            return None # –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –Ω–µ–∑–º—ñ–Ω–Ω–∏–º
            
        return None 
# ... (–Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
def send_photo_message(photo_path, caption, parse_mode='Markdown'):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º."""
    try:
        if not os.path.exists(photo_path):
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç.")
            bot.send_message(CHANNEL_DESTINATION, caption, parse_mode=parse_mode)
            return True
            
        with open(photo_path, 'rb') as photo:
            bot.send_photo(
                CHANNEL_DESTINATION, 
                photo,
                caption=caption,
                parse_mode=parse_mode
            )
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ: {photo_path}")
        return True
        
    except telebot.apihelper.ApiTelegramException as e:
        if "Forbidden" in str(e):
            logger.critical("–ü–û–ú–ò–õ–ö–ê TELEGRAM API 403: –ë–û–¢ –ù–ï –Ñ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–û–ú –ö–ê–ù–ê–õ–£! –¶—é –ø—Ä–æ–±–ª–µ–º—É –Ω–µ –≤–∏—Ä—ñ—à–∏—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É!")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        return False

def check_and_post_silence_minute():
    """–ü—É–±–ª—ñ–∫—É—î –•–≤–∏–ª–∏–Ω—É –º–æ–≤—á–∞–Ω–Ω—è —Ä—ñ–≤–Ω–æ –æ 9:00 –∑–∞ –ö–∏—î–≤–æ–º, –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å."""
    global last_silence_date
    
    now_kyiv = datetime.now(KYIV_TIMEZONE)
    today = now_kyiv.date()
    
    if last_silence_date == today:
        return
    
    target_time = datetime.combine(today, dt_time(9, 0), KYIV_TIMEZONE)
    window_start = target_time
    window_end = target_time + timedelta(seconds=CHECK_INTERVAL * 2) 
    
    if window_start <= now_kyiv < window_end:
        logger.warning(f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è. –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å: {now_kyiv.strftime('%H:%M:%S')}. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...")
        
        caption = "üá∫üá¶ **–•–í–ò–õ–ò–ù–ê –ú–û–í–ß–ê–ù–ù–Ø** üá∫üá¶\n\n–©–æ–¥–µ–Ω–Ω–æ –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤, —è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó."
        
        success = send_photo_message(SILENCE_MINUTE_PHOTO_PATH, caption)
        
        if success:
            last_silence_date = today 


def check_and_post_alarm(new_alarm_state):
    """–û–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    global current_alarm_state

    if current_alarm_state is None:
        current_alarm_state = new_alarm_state
        initial_status = "–¢–†–ò–í–û–ì–ê" if current_alarm_state else "–í–Ü–î–ë–Ü–ô"
        logger.warning(f"–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {initial_status}")
        return
        
    if new_alarm_state != current_alarm_state:
        
        if new_alarm_state is True:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê!")
            caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n**{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
            send_photo_message(ALARM_PHOTO_PATH, caption)
        else:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô!")
            caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n**{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
            send_photo_message(ALL_CLEAR_PHOTO_PATH, caption)
        
        current_alarm_state = new_alarm_state


# --- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ ---
def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É."""
    
    logger.warning("–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ...")
    
    while True:
        check_and_post_silence_minute()
        
        new_alarm_state = get_alarm_status()
        
        if new_alarm_state is not None:
            check_and_post_alarm(new_alarm_state)

        time.sleep(CHECK_INTERVAL)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    try:
        start_monitoring()
    except KeyboardInterrupt:
        logger.warning("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
