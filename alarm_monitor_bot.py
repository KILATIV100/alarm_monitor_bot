import telebot
import requests
import time
import logging
import os
from datetime import datetime, time as dt_time, timedelta
import pytz 
from telethon import TelegramClient, events
import asyncio

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–†–û–Ñ–ö–¢–£ ---
# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è (–¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó)
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_DESTINATION = os.environ.get("CHANNEL_DESTINATION")

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è (–¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Telethon)
API_ID = os.environ.get("TELEGRAM_API_ID") 
API_HASH = os.environ.get("TELEGRAM_API_HASH")
TARGET_CHANNEL_USERNAME = os.environ.get("TARGET_CHANNEL_USERNAME") 

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
ALARM_PHOTO_PATH = "airallert.png"
ALL_CLEAR_PHOTO_PATH = "airallert2.png"
SILENCE_MINUTE_PHOTO_PATH = "hvilina.png" 

# –£–í–ê–ì–ê: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 60 —Å–µ–∫—É–Ω–¥ (1 —Ö–≤–∏–ª–∏–Ω–∞)
CHECK_INTERVAL = 60 

# –¶—ñ–ª—å–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω (–ú–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å)
TARGET_REGION_ID_NEW = "–ö–∏—ó–≤—Å—å–∫–∞"
TARGET_AREA_NAME = "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)" 

# –ù–û–í–ò–ô –°–¢–ê–ë–Ü–õ–¨–ù–ò–ô URL: –Ü–º–æ–≤—ñ—Ä–Ω–∏–π API –∑ alarmmap.online
ALARM_API_URL = "https://map.ukrainealarm.com/api/v3/alerts" 

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è
KYIV_TIMEZONE = pytz.timezone('Europe/Kyiv') 
SILENCE_TIME = dt_time(9, 0) 
# --- –ö–Ü–ù–ï–¶–¨ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ---

if not all([BOT_TOKEN, CHANNEL_DESTINATION, API_ID, API_HASH, TARGET_CHANNEL_USERNAME]):
    raise ValueError("–û–¥–Ω–∞ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Telegram –≤—ñ–¥—Å—É—Ç–Ω—ñ!")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Telethon —Ç–∞ –±–æ—Ç–∞ pyTelegramBotAPI
client = TelegramClient('alarm_session', int(API_ID), API_HASH)
bot_publisher = telebot.TeleBot(BOT_TOKEN)

# –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É
current_alarm_state = None 
last_silence_date = None 

# --- –§–£–ù–ö–¶–Ü–á API (–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥) ---

def get_alarm_status():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ –∑ API."""
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36'
    }
    
    try:
        response = requests.get(ALARM_API_URL, headers=headers, timeout=10)
        response.raise_for_status() 
        data = response.json()
        
        # –õ–æ–≥—ñ–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: —à—É–∫–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–±–ª–∞—Å—Ç—å
        is_alarm = any(
            item.get('regionName') == TARGET_REGION_ID_NEW and item.get('status') == 'alarm'
            for item in data.get('regions', [])
        )
        
        return is_alarm
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API ({ALARM_API_URL}): {e}") 
        return None

# --- –§–£–ù–ö–¶–Ü–á –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á ---

def send_photo_message(bot, photo_path, caption, parse_mode='Markdown'):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º."""
    # ... (–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    try:
        if not os.path.exists(photo_path):
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç.")
            bot.send_message(CHANNEL_DESTINATION, caption, parse_mode=parse_mode)
            return True
            
        with open(photo_path, 'rb') as photo:
            bot.send_photo(
                CHANNEL_DESTINATION, 
                photo,
                caption=caption,
                parse_mode=parse_mode
            )
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ: {photo_path}")
        return True
        
    except telebot.apihelper.ApiTelegramException as e:
        if "Forbidden" in str(e):
            logger.critical("‚ùå –ü–û–ú–ò–õ–ö–ê TELEGRAM API 403: –ë–û–¢ –ù–ï –Ñ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–û–ú –ö–ê–ù–ê–õ–£! –í–∏–ø—Ä–∞–≤—Ç–µ —Ü–µ –≤—Ä—É—á–Ω—É.")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        return False

# --- –õ–û–ì–Ü–ö–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ (TELETHON - –û—Å–Ω–æ–≤–Ω–∞) ---

@client.on(events.NewMessage(chats=TARGET_CHANNEL_USERNAME))
async def handle_new_alarm_message(event):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É."""
    global current_alarm_state
    
    text = event.message.to_dict().get('message', '').lower()
    
    # –ö—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    is_target_region = any(kw.lower() in text for kw in KEYWORDS)
    
    if not is_target_region:
        return 
    
    is_alarm_start = "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞" in text or "–æ–≥–æ–ª–æ—à–µ–Ω–∞" in text or "–æ–≥–æ–ª–æ—à–µ–Ω–∞ –ø–æ –∫–∏—ó–≤—Å—å–∫—ñ–π" in text
    is_all_clear = any(kw.lower() in text for kw in ALL_CLEAR_KEYWORDS)

    if is_alarm_start and current_alarm_state is not True:
        current_alarm_state = True
        logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê (—á–µ—Ä–µ–∑ Telegram-–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥)!")
        caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n**{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
        send_photo_message(bot_publisher, ALARM_PHOTO_PATH, caption)
        
    elif is_all_clear and current_alarm_state is not False:
        current_alarm_state = False
        logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô (—á–µ—Ä–µ–∑ Telegram-–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥)!")
        caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n**{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
        send_photo_message(bot_publisher, ALL_CLEAR_PHOTO_PATH, caption)


# --- –õ–û–ì–Ü–ö–ê –¢–ê–ô–ú–ï–†–ê (–•–í–ò–õ–ò–ù–ê –ú–û–í–ß–ê–ù–ù–Ø) ---

async def check_silence_minute_task():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è —Ç–∞ API Fallback."""
    global last_silence_date
    global current_alarm_state
    
    while True:
        # 1. –õ–æ–≥—ñ–∫–∞ –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è
        now_kyiv = datetime.now(KYIV_TIMEZONE)
        today = now_kyiv.date()
        
        # ... (–õ–æ–≥—ñ–∫–∞ –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
        if last_silence_date != today:
            target_time = datetime.combine(today, SILENCE_TIME, KYIV_TIMEZONE)
            window_start = target_time
            window_end = target_time + timedelta(seconds=CHECK_INTERVAL * 2) 
            
            if window_start <= now_kyiv < window_end:
                logger.warning(f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è. –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å: {now_kyiv.strftime('%H:%M:%S')}. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...")
                caption = "üá∫üá¶ **–•–í–ò–õ–ò–ù–ê –ú–û–í–ß–ê–ù–ù–Ø** üá∫üá¶\n\n–©–æ–¥–µ–Ω–Ω–æ –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤, —è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó."
                success = send_photo_message(bot_publisher, SILENCE_MINUTE_PHOTO_PATH, caption)
                if success:
                    last_silence_date = today 
        
        # 2. –õ–æ–≥—ñ–∫–∞ API Fallback (–ó–∞–ø—É—Å–∫ API, —è–∫—â–æ Telethon –∑ —è–∫–∏—Ö–æ—Å—å –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        new_alarm_state = get_alarm_status()
        
        if new_alarm_state is not None and new_alarm_state != current_alarm_state:
            
            if current_alarm_state is None:
                # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
                current_alarm_state = new_alarm_state
                logger.warning(f"–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ API: {'–¢—Ä–∏–≤–æ–≥–∞' if current_alarm_state else '–í—ñ–¥–±—ñ–π'}")
            elif new_alarm_state is True:
                # –¢—Ä–∏–≤–æ–≥–∞
                current_alarm_state = True
                logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê (—á–µ—Ä–µ–∑ API Fallback)!")
                caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n**{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
                send_photo_message(bot_publisher, ALARM_PHOTO_PATH, caption)
            else:
                # –í—ñ–¥–±—ñ–π
                current_alarm_state = False
                logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô (—á–µ—Ä–µ–∑ API Fallback)!")
                caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n**{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
                send_photo_message(bot_publisher, ALL_CLEAR_PHOTO_PATH, caption)


        await asyncio.sleep(CHECK_INTERVAL)

# --- –ó–ê–ü–£–°–ö ---
async def main():
    logger.warning("–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ...")
    
    try:
        # –ó–∞–ø—É—Å–∫ Telethon –∫–ª—ñ—î–Ω—Ç–∞
        await client.start()
    except Exception as e:
        logger.critical(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Telethon –∫–ª—ñ—î–Ω—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API_ID/HASH: {e}")
        return

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –¥–ª—è –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è —Ç–∞ API Fallback
    asyncio.create_task(check_silence_minute_task())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç—ñ–π–Ω—É —Ä–æ–±–æ—Ç—É
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        # –î–ª—è –∑–∞–ø—É—Å–∫—É Telethon –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª
        with client:
            client.loop.run_until_complete(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–±–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
