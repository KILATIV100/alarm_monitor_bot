import telebot
import requests
import time
import logging
import os
from datetime import datetime, time as dt_time, timedelta
import pytz # –î–ª—è —Ç–æ—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ —á–∞—Å–æ–≤–∏–º–∏ –ø–æ—è—Å–∞–º–∏

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–†–û–Ñ–ö–¢–£ ---
# –ó–º—ñ–Ω–Ω—ñ —á–∏—Ç–∞—é—Ç—å—Å—è –∑ Environment Variables –Ω–∞ Railway
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_DESTINATION = os.environ.get("CHANNEL_DESTINATION")

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –í–æ–Ω–∏ –º–∞—é—Ç—å –ª–µ–∂–∞—Ç–∏ –ø–æ—Ä—É—á —ñ–∑ —Ü–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º.
ALARM_PHOTO_PATH = "airallert.png"
ALL_CLEAR_PHOTO_PATH = "airallert2.png"
SILENCE_MINUTE_PHOTO_PATH = "hvilina.png" 

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
CHECK_INTERVAL = 7 # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API —É —Å–µ–∫—É–Ω–¥–∞—Ö

# –¶—ñ–ª—å–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω (–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω)
TARGET_AREA_ID = "251675276"
TARGET_AREA_NAME = "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)"
ALARM_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è
KYIV_TIMEZONE = pytz.timezone('Europe/Kyiv') # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
SILENCE_TIME = dt_time(9, 0) # –†—ñ–≤–Ω–æ 09:00:00 –∑–∞ –ö–∏—î–≤–æ–º
# --- –ö–Ü–ù–ï–¶–¨ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ---

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
if not BOT_TOKEN or not CHANNEL_DESTINATION:
    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –∑–º—ñ–Ω–Ω—ñ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ (–∞–±–æ –Ω–µ —á–∏—Ç–∞—é—Ç—å—Å—è)
    raise ValueError("BOT_TOKEN –∞–±–æ CHANNEL_DESTINATION –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.critical(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    exit(1)

# –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É
current_alarm_state = None 
last_silence_date = None # –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è

# --- –§–£–ù–ö–¶–Ü–á ---

def get_alarm_status():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ User-Agent."""
    
    # –î–æ–¥–∞—î–º–æ User-Agent –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—É –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞ —ñ –æ–±—Ö–æ–¥—É 403 Forbidden
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36'
    }
    
    try:
        response = requests.get(ALARM_API_URL, headers=headers, timeout=10)
        response.raise_for_status() 
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ–≥–æ ID
        is_alarm = any(
            item.get('alert_type') == 'air_raid' and 
            item.get('location_uid') == TARGET_AREA_ID
            for item in data
        )
        return is_alarm
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}") 
        return None

def send_photo_message(photo_path, caption, parse_mode='Markdown'):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º."""
    try:
        if not os.path.exists(photo_path):
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç.")
            bot.send_message(CHANNEL_DESTINATION, caption, parse_mode=parse_mode)
            return True
            
        with open(photo_path, 'rb') as photo:
            bot.send_photo(
                CHANNEL_DESTINATION, 
                photo,
                caption=caption,
                parse_mode=parse_mode
            )
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ: {photo_path}")
        return True
        
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ CHANNEL_DESTINATION —Ç–∞ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
    return False

def check_and_post_silence_minute():
    """–ü—É–±–ª—ñ–∫—É—î –•–≤–∏–ª–∏–Ω—É –º–æ–≤—á–∞–Ω–Ω—è —Ä—ñ–≤–Ω–æ –æ 9:00 –∑–∞ –ö–∏—î–≤–æ–º, –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å."""
    global last_silence_date
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ –ö–∏—î–≤–∞
    now_kyiv = datetime.now(KYIV_TIMEZONE)
    today = now_kyiv.date()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –ø–æ—Å—Ç–∏–ª–∏?
    if last_silence_date == today:
        return
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–æ—á–Ω–∏–π –º–æ–º–µ–Ω—Ç 09:00:00 –∑–∞ –ö–∏—î–≤–æ–º
    target_time = datetime.combine(today, SILENCE_TIME, KYIV_TIMEZONE)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–µ –≤—ñ–∫–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è (09:00:00 + —á–∞—Å –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª—É)
    window_start = target_time
    window_end = target_time + timedelta(seconds=CHECK_INTERVAL * 2) 
    
    if window_start <= now_kyiv < window_end:
        logger.warning(f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è. –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å: {now_kyiv.strftime('%H:%M:%S')}. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...")
        
        caption = "üá∫üá¶ **–•–í–ò–õ–ò–ù–ê –ú–û–í–ß–ê–ù–ù–Ø** üá∫üá¶\n\n–©–æ–¥–µ–Ω–Ω–æ –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤, —è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó."
        
        success = send_photo_message(SILENCE_MINUTE_PHOTO_PATH, caption)
        
        if success:
            last_silence_date = today # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó


def check_and_post_alarm(new_alarm_state):
    """–û–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    global current_alarm_state

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
    if current_alarm_state is None:
        current_alarm_state = new_alarm_state
        initial_status = "–¢–†–ò–í–û–ì–ê" if current_alarm_state else "–í–Ü–î–ë–Ü–ô"
        logger.warning(f"–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {initial_status}")
        return
        
    # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ª–∏—à–µ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É
    if new_alarm_state != current_alarm_state:
        
        if new_alarm_state is True:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê!")
            caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n–†–∞–π–æ–Ω: **{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
            send_photo_message(ALARM_PHOTO_PATH, caption)
        else:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô!")
            caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n–†–∞–π–æ–Ω: **{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
            send_photo_message(ALL_CLEAR_PHOTO_PATH, caption)
        
        current_alarm_state = new_alarm_state


# --- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ ---
def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É."""
    
    logger.warning("–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ...")
    
    while True:
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è
        check_and_post_silence_minute()
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
        new_alarm_state = get_alarm_status()
        
        if new_alarm_state is not None:
            check_and_post_alarm(new_alarm_state)

        time.sleep(CHECK_INTERVAL)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    try:
        start_monitoring()
    except KeyboardInterrupt:
        logger.warning("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
