import telebot
import requests
import time
import logging
import os # –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–†–û–Ñ–ö–¢–£ ---
# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8457233690:AAHV-YlyvDVakTsDTpMTVNCsZgve8fbKbwU"

# –ù–∞–∑–≤–∞ –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @) –∞–±–æ –π–æ–≥–æ ID (-100...)
# –ü–†–ò–ú–Ü–¢–ö–ê: –ë–æ—Ç –º–∞—î –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É!
CHANNEL_DESTINATION = "@YourChannelUsernameOrID" # <--- –û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ê–ú–Ü–ù–Ü–¢–¨!

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –í–æ–Ω–∏ –º–∞—é—Ç—å –ª–µ–∂–∞—Ç–∏ –ø–æ—Ä—É—á —ñ–∑ —Ü–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º.
ALARM_PHOTO_PATH = "airallert.png"
ALL_CLEAR_PHOTO_PATH = "airallert2.png"

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
CHECK_INTERVAL = 7 # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API —É —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è "–º–∏—Ç—Ç—î–≤–æ—Å—Ç—ñ")

# –¶—ñ–ª—å–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω (–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω)
# ID '–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω' —É API –∫–∞—Ä—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥
TARGET_AREA_ID = "251675276"
TARGET_AREA_NAME = "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)"

# URL API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏
ALARM_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"
# --- –ö–Ü–ù–ï–¶–¨ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ---

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    exit(1)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏
current_alarm_state = None 

# --- –§–£–ù–ö–¶–Ü–á ---

def get_alarm_status():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω—É –∑ API."""
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
        response = requests.get(ALARM_API_URL, timeout=10)
        response.raise_for_status() 
        data = response.json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ–≥–æ ID
        is_alarm = any(
            item.get('alert_type') == 'air_raid' and 
            item.get('location_uid') == TARGET_AREA_ID
            for item in data
        )
        
        return is_alarm
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")
        return None

def post_to_channel(is_alarm_start):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª."""
    try:
        if is_alarm_start:
            photo_path = ALARM_PHOTO_PATH
            caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n–†–∞–π–æ–Ω: **{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
        else:
            photo_path = ALL_CLEAR_PHOTO_PATH
            caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n–†–∞–π–æ–Ω: **{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
            
        if not os.path.exists(photo_path):
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {photo_path}")
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            bot.send_message(CHANNEL_DESTINATION, caption, parse_mode='Markdown')
            return
            
        with open(photo_path, 'rb') as photo:
            bot.send_photo(
                CHANNEL_DESTINATION, 
                photo,
                caption=caption,
                parse_mode='Markdown'
            )
        
        status = "–¢–†–ò–í–û–ì–ê" if is_alarm_start else "–í–Ü–î–ë–Ü–ô"
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ {status}")
        
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ CHANNEL_DESTINATION —Ç–∞ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")

# --- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ ---
def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏."""
    global current_alarm_state
    
    logger.warning(f"–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ. –¶—ñ–ª—å: {TARGET_AREA_NAME}")
    
    while True:
        new_alarm_state = get_alarm_status()
        
        if new_alarm_state is not None:
            
            # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
            if current_alarm_state is None:
                current_alarm_state = new_alarm_state
                initial_status = "–¢–†–ò–í–û–ì–ê" if current_alarm_state else "–í–Ü–î–ë–Ü–ô"
                logger.warning(f"–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {initial_status}")
                
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É
            elif new_alarm_state != current_alarm_state:
                
                # –ü–æ—á–∞—Ç–æ–∫ / –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏
                if new_alarm_state is True:
                    logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê!")
                    post_to_channel(is_alarm_start=True)
                else:
                    logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô!")
                    post_to_channel(is_alarm_start=False)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
                current_alarm_state = new_alarm_state
        
        time.sleep(CHECK_INTERVAL)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    try:
        start_monitoring()
    except KeyboardInterrupt:
        logger.warning("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
