import telebot
import requests
import time
import logging
import os
from datetime import datetime, time as dt_time, timedelta
import pytz 
import json
from json.decoder import JSONDecodeError

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–†–û–Ñ–ö–¢–£ ---
# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è (–ó Railway)
BOT_TOKEN = str(os.environ.get("BOT_TOKEN", "")).strip()
CHANNEL_DESTINATION = str(os.environ.get("CHANNEL_DESTINATION", "")).strip()
UKRAINE_ALARM_API_KEY = str(os.environ.get("UKRAINE_ALARM_API_KEY", "")).strip()

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å
ALARM_PHOTO_PATH = "airallert.png"
ALL_CLEAR_PHOTO_PATH = "airallert2.png"
SILENCE_MINUTE_PHOTO_PATH = "hvilina.png" 

# –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 10 —Å–µ–∫—É–Ω–¥
CHECK_INTERVAL = 10 

# –¶—ñ–ª—å–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å - ID 11)
TARGET_REGION_ID = "11"
TARGET_AREA_NAME = "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å)" 

# API UkraineAlarm
ALARM_API_URL = "https://api.ukrainealarm.com/api/v3/alerts/status" 

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è
KYIV_TIMEZONE = pytz.timezone('Europe/Kyiv') 
SILENCE_TIME = dt_time(9, 0) 
# --- –ö–Ü–ù–ï–¶–¨ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ---

# –ö–†–ò–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–£
if not all([BOT_TOKEN, CHANNEL_DESTINATION, UKRAINE_ALARM_API_KEY]):
    logging.critical("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–¥–Ω—É –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
    raise ValueError("–û–¥–Ω–∞ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ!")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.critical(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    exit(1)

# –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É
current_alarm_state = None 
last_silence_date = None 

# --- –§–£–ù–ö–¶–Ü–á API –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –°–¢–Ü–ô–ö–Ü–°–¢–¨) ---

def get_alarm_status():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–¥–∞–Ω–∏–π API-–∫–ª—é—á."""
    
    headers = {
        'Authorization': UKRAINE_ALARM_API_KEY,
        'User-Agent': 'Telegram Alarm Bot (Custom Monitoring)'
    }
    
    try:
        response = requests.get(ALARM_API_URL, headers=headers, timeout=10)
        response.raise_for_status() 
        
        try:
            data = response.json()
        except JSONDecodeError:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON.")
            return None
        
        if not isinstance(data, dict):
            logger.error("API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö (–Ω–µ —Å–ª–æ–≤–Ω–∏–∫).")
            return None
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –∑ –∫–ª—é—á–∞ 'states'
        regions_list = data.get('states', [])
        
        if not regions_list:
            logger.warning("API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á 'states'.")
            return False # –í–≤–∞–∂–∞—î–º–æ –≤—ñ–¥–±–æ—î–º, —è–∫—â–æ API –Ω–µ –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç—Ä–∏–≤–æ–≥—É

        # –§–Ü–ù–ê–õ–¨–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –õ–û–ì–Ü–ö–ò: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î activeAlerts –Ω–µ–ø—É—Å—Ç–∏–º —Å–ø–∏—Å–∫–æ–º.
        is_alarm = any(
            item.get('regionId') == TARGET_REGION_ID and item.get('activeAlerts') is not None and len(item.get('activeAlerts', [])) > 0
            for item in regions_list
        )
        
        return is_alarm
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê API (–ó–±—ñ–π –ø—ñ–¥ —á–∞—Å —Ç—Ä–∏–≤–æ–≥–∏?): {e}") 
        return None

# --- –§–£–ù–ö–¶–Ü–á –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á ---

def send_photo_message(bot_instance, photo_path, caption, parse_mode='Markdown'):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º."""
    try:
        if not os.path.exists(photo_path):
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç.")
            bot_instance.send_message(CHANNEL_DESTINATION, caption, parse_mode=parse_mode)
            return True
            
        with open(photo_path, 'rb') as photo:
            bot_instance.send_photo(
                CHANNEL_DESTINATION, 
                photo,
                caption=caption,
                parse_mode=parse_mode
            )
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ: {photo_path}")
        return True
        
    except telebot.apihelper.ApiTelegramException as e:
        if "Forbidden" in str(e):
            logger.critical("‚ùå –ü–û–ú–ò–õ–ö–ê TELEGRAM API 403: –ë–û–¢ –ù–ï –Ñ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–û–ú –ö–ê–ù–ê–õ–£! –í–ò–ü–†–ê–í–¢–ï –¶–ï –í–†–£–ß–ù–£.")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        return False

# --- –õ–û–ì–Ü–ö–ê –•–í–ò–õ–ò–ù–ò –ú–û–í–ß–ê–ù–ù–Ø ---

def check_and_post_silence_minute():
    """–ü—É–±–ª—ñ–∫—É—î –•–≤–∏–ª–∏–Ω—É –º–æ–≤—á–∞–Ω–Ω—è —Ä—ñ–≤–Ω–æ –æ 9:00 –∑–∞ –ö–∏—î–≤–æ–º, –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å."""
    global last_silence_date
    
    now_kyiv = datetime.now(KYIV_TIMEZONE)
    today = now_kyiv.date()
    
    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–∞—Å—É
    if now_kyiv.hour == 8 or now_kyiv.hour == 9: 
        logger.info(f"Kyiv Time Check: {now_kyiv.strftime('%H:%M:%S')}. Last posted: {last_silence_date}")
        
    if last_silence_date == today:
        return
    
    target_time = datetime.combine(today, SILENCE_TIME, KYIV_TIMEZONE)
    
    # –í—ñ–∫–Ω–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: 8:59:00 –¥–æ 9:01:00
    start_time_dt = datetime.combine(today, dt_time(8, 59), KYIV_TIMEZONE)
    end_time_dt = datetime.combine(today, dt_time(9, 1), KYIV_TIMEZONE)
    
    if start_time_dt <= now_kyiv < end_time_dt:
        logger.warning(f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å –•–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è. –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å: {now_kyiv.strftime('%H:%M:%S')}. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...")
        
        caption = "üá∫üá¶ **–•–í–ò–õ–ò–ù–ê –ú–û–í–ß–ê–ù–ù–Ø** üá∫üá¶\n\n–©–æ–¥–µ–Ω–Ω–æ –≤—à–∞–Ω–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤, —è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó –†–æ—Å—ñ–π—Å—å–∫–æ—ó –§–µ–¥–µ—Ä–∞—Ü—ñ—ó."
        
        success = send_photo_message(bot, SILENCE_MINUTE_PHOTO_PATH, caption)
        
        if success:
            last_silence_date = today 


def check_and_post_alarm(new_alarm_state):
    """–û–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    global current_alarm_state

    if current_alarm_state is None:
        current_alarm_state = new_alarm_state
        initial_status = "–¢–†–ò–í–û–ì–ê" if current_alarm_state else "–í–Ü–î–ë–Ü–ô"
        logger.warning(f"–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {initial_status}")
        return
        
    if new_alarm_state != current_alarm_state:
        
        if new_alarm_state is True:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –¢–†–ò–í–û–ì–ê!")
            caption = f"üö® **–£–í–ê–ì–ê! –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê!** üö®\n\n**{TARGET_AREA_NAME}**\n\n\n**–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä—è–º—É–π—Ç–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è!**"
            send_photo_message(bot, ALARM_PHOTO_PATH, caption)
        else:
            logger.warning("–ó–ú–Ü–ù–ê –°–¢–ê–ù–£: –í–Ü–î–ë–Ü–ô!")
            caption = f"‚úÖ **–í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò** ‚úÖ\n\n**{TARGET_AREA_NAME}**\n\n\n–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –∑ —É–∫—Ä–∏—Ç—Ç—è. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å–ø–æ–∫—ñ–π."
            send_photo_message(bot, ALL_CLEAR_PHOTO_PATH, caption)
        
        current_alarm_state = new_alarm_state


# --- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ ---
def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É."""
    
    logger.warning("–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ...")
    
    while True:
        check_and_post_silence_minute()
        
        new_alarm_state = get_alarm_status()
        
        if new_alarm_state is not None:
            check_and_post_alarm(new_alarm_state)

        time.sleep(CHECK_INTERVAL)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    try:
        start_monitoring()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–±–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
